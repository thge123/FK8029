from PLOTTING import *
from numpy import array,zeros,exp,cos,pi
from numpy.linalg import solve
from scipy.interpolate import BSpline
from numpy import max as MAX
from numpy import abs as ABS

def sigma1(x,r):
    return 3.0

def sigma1_exact(X,r):
    ''' Takes in X numpy array and dummy r.
        Gives exact sol. to bndry. problem
            g''(x) + sigma*x = 0
            g(0) = g(1) = 0
    '''
    return -X**3/2+0.5*X

def sigma2(x,r):
    return 3*(x>r)/(1-r**3)

def sigma2_exact(X,r):
    ''' Takes in X numpy array and r=R1/R2.
        Gives exact sol. to bndry. problem
            g''(x) + sigma2*x = 0
            g(0) = g(1) = 0
    '''
    A1 = ( -1.5*(r**2)/(1-r**3) + 0.5/(1-r) )/(1+r/(1-r))
    A2 = (0.5-A1*r)/(1-r)
    B2 = 1/(2*(1-r**3)) - A2
    Y  = (X<r)*A1*X + (X>=r)*(-X**3/(2*(1-r**3))+A2*X+B2)
    return Y

def sigma3(x,alpha):
    return 4*alpha**3*exp(-2*alpha*x)/3

def sigma3_exact(X,r):
    return 0

def numsol(N,i,r):

    K = 4                                    # order of B splines
    X = [0.0]
    for k in range(1,N-1):
        phi = (2*k-1)*pi/(2*(N-2))
        X.append(0.5+0.5*cos(phi))
    X.append(1.0)
    X.sort()
    t = array(K*[X[0]] + X + K*[X[-1]])      # knots 
    n = len(t)-K-1                           # = number of B splines
    print("Number of B splines: ", n)

    A = zeros((n,n))
    b = zeros(n)

    X = [0.0]
    for k in range(1,n-1):
        phi = (2*k-1)*pi/(2*(n-2))
        X.append(0.5+0.5*cos(phi))
    X.append(1.0)
    X.sort()

    sigma = [sigma1,sigma2,sigma3][i]
    
    # Construct matrix eq.
    A[0,0]     = 1.0
    A[n-1,n-1] = 1.0
    c = zeros(n)
    for j in range(1,n-1):
        c[j] = 1
        spl  = BSpline(t,c,K,extrapolate=False)
        spl  = spl.derivative(2)
        for k in range(1,n-1):
            A[k,j] = spl(X[k])
        c[j] = 0.0
        b[j] = -sigma(X[j],r)*X[j]
    c = solve(A,b)
    return BSpline(t,c,K,extrapolate=False)

def main():

    
    fig = plt.figure()
    ax  = fig.add_subplot(211)
    axx = fig.add_subplot(212)
    X = array([j/100 for j in range(101)])
    i = int(input("Write sigma [1,2,3]: ")) - 1 
    exact_sol = [sigma1_exact,sigma2_exact,sigma3_exact][i]
    N = int(input("Write N: "))
    r = float(input("Write r: "))

    spl = numsol(N,i,r)
    ax.plot(X,spl(X)+X)

    Y = exact_sol(X,r)
    axx.plot(X,Y+X)

    plt.show()

main()
